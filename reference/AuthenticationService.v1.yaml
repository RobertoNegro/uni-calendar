openapi: 3.0.0
info:
  title: AuthenticationService
  version: '1.0'
  description: Service used for user authentication (via Google OAuth 2.0). Accessible from the outside.
servers:
  - url: 'http://authentication'
paths:
  /google/oauth:
    post:
      summary: Google OAuth
      operationId: post-google-login
      responses:
        '307':
          description: Temporary Redirect
      description: |-
        Used to perform the login of the user via Google OAuth, it will redirect the user to Google Login page.
        See http://www.passportjs.org/docs/google/#oauth-2-0 (see Oauth 2.0, NOT 1.0)
    parameters: []
  /google/callback:
    get:
      summary: Google OAuth Callback
      tags: []
      responses:
        '307':
          description: Temporary Redirect
      operationId: get-google-callback
      description: |-
        Redirect the user to "error page" or "authenticated page" (and saves the google id into the db).
        Request body depends on Google OAuth Results (error or user data), but they are managed directly by PassportJS.
        See http://www.passportjs.org/docs/google/#oauth-2-0 (see Oauth 2.0, NOT 1.0)
    parameters: []
  /auth:
    post:
      summary: Check user authentication
      operationId: post-auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  cookie:
                    type: object
                    required:
                      - token
                      - exp
                    properties:
                      token:
                        type: string
                        minLength: 1
                      exp:
                        type: number
                required:
                  - user
                  - cookie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
        description: ''
      description: 'Verify the user token if it''s valid. If it''s valid, but the google access code is expired, it will generate a new access code and the token will be sent back to the frontend in order to be saved in the browser cookies.'
  /refresh:
    post:
      summary: Refresh user token
      operationId: post-refresh
      responses:
        '200':
          description: OK
      description: 'Internal route. Refresh the Google access token for a specific user, if specified in the body, or of all the users, if userId is not defined in the body.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: number
components:
  schemas:
    User:
      description: All the stored information regarding the user
      type: object
      title: User
      properties:
        email:
          type: string
        googleAccessToken:
          type: string
        googleExpiringTime:
          type: string
        googleRefreshToken:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        university:
          $ref: ./UniversitiesGatewayService.v1.yaml#/components/schemas/University
        id:
          type: number
        picture:
          type: string
        telegramToken:
          type: string
      required:
        - email
        - googleAccessToken
        - googleExpiringTime
        - googleRefreshToken
        - lastName
        - firstName
        - id
        - picture
  securitySchemes: {}
